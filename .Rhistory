climate_awareness_weighted <- climate_awareness_summary |>
group_by(group) |>
summarize(
aware_alittle = sum(aware_alittle, na.rm = TRUE),
aware_alot = sum(aware_alot, na.rm = TRUE),
aware_moderate = sum(aware_moderate, na.rm = TRUE),
aware_no = sum(aware_no, na.rm = TRUE),
aware_refuse = sum(aware_refuse, na.rm = TRUE),
.groups = "drop"
) |>
pivot_longer(
cols = c(aware_alittle, aware_alot, aware_moderate, aware_no, aware_refuse),
names_to = "awareness_level",
values_to = "weighted_average"
) |>
mutate(
average = case_when(
group == "Affected" ~ weighted_average / total_storms_affected,
group == "Unaffected" ~ weighted_average / total_storms_unaffected
)
)
ggplot(climate_awareness_weighted, aes(x = awareness_level, y = average, fill = group)) +
geom_bar(stat = "identity") +
scale_y_log10() +
labs(
title = "Weighted Climate Awareness by Cyclone Impact",
x = "Awareness Level",
y = "Weighted Average",
fill = "Cyclone Impact"
) +
theme_minimal()
# This is an example of how you can control figures and captions in
# an R chunk. Note that you can reference figures using:
# \@ref(fig:insight1), where "insight1" is the label of this code
# chunk (the first bit of text after the "r" in "```{r label, options...}")
world_map <- map_data("world")
ggplot() +
geom_polygon(data = world_map, aes(x = long, y = lat, group = group), fill = "lightgray", color = "white") +
# hurricanes +-5 of equator are extremely rare
geom_rect(aes(xmin = -180, xmax = 180, ymin = -5, ymax = 5), fill = "red", alpha = 0.2) +
geom_hex(data = cyclones_data, aes(x = long, y = lat, fill = category), bins = 50, alpha = 0.7) +
scale_fill_viridis_d(name = "Storm Category") +
labs(
title = "North Atlantic and Northeast Pacific Cyclones by Category",
x = "Longitude",
y = "Latitude"
) +
scale_x_continuous(breaks = c(-180, -90, 0, 90, 180)) +
scale_y_continuous(breaks = c(-90, -45, 0, 45, 90)) +
theme_minimal()
total_storms_affected <- sum(cyclone_affected_countries$num_unique_storms)
total_storms_unaffected <- nrow(cyclone_unaffected_countries)
climate_awareness_weighted <- climate_awareness_summary |>
group_by(group) |>
summarize(
aware_alittle = sum(aware_alittle, na.rm = TRUE),
aware_alot = sum(aware_alot, na.rm = TRUE),
aware_moderate = sum(aware_moderate, na.rm = TRUE),
aware_no = sum(aware_no, na.rm = TRUE),
aware_refuse = sum(aware_refuse, na.rm = TRUE),
.groups = "drop"
) |>
pivot_longer(
cols = c(aware_alittle, aware_alot, aware_moderate, aware_no, aware_refuse),
names_to = "awareness_level",
values_to = "weighted_average"
) |>
mutate(
average = case_when(
group == "Affected" ~ weighted_average / total_storms_affected,
group == "Unaffected" ~ weighted_average / total_storms_unaffected
)
)
ggplot(climate_awareness_weighted, aes(x = awareness_level, y = average, fill = group)) +
geom_bar(stat = "identity") +
scale_y_log10() +
labs(
title = "Weighted Climate Awareness by Cyclone Impact",
x = "Awareness Level",
y = "Weighted Average",
fill = "Cyclone Impact"
) +
theme_minimal()
# Calculate the relevant summary statistics here.
# Note that the "kable" function in the "knitr" package
# is convenient for making nice tables. Other packages can
# do much fancier things with tables, but keep in mind that
# the insights should be the star, not the formatting.
ggplot(happiness_mapped) +
aes(x = long, y = lat, group = group, fill = perceptions_of_corruption) +
geom_polygon(color = "darkgrey") +
theme_void() +
theme(plot.background = element_rect(fill = "grey", color = NA), legend.position = "bottom", legend.direction = "horizontal") +
labs(title = "Perception of Corruption by Country", fill = "Perceived\nCorruption") +
scale_fill_distiller(palette = "PRGn")
cyclones_data <- cyclones_data |>
mutate(MonthName = factor(month.abb[Month], levels = month.abb)) |>
relocate(MonthName, .after = Month)
ggplot() +
geom_polygon(data = world_map, aes(x = long, y = lat, group = group), fill = "lightgray", color = "white") +
geom_rect(aes(xmin = -180, xmax = 180, ymin = -5, ymax = 5), fill = "red", alpha = 0.2) +
geom_hex(data = cyclones_data, aes(x = long, y = lat, fill = Basin, alpha = ..count..), bins = 50) +
scale_fill_viridis_d(name = "Storm Category") +
scale_alpha(range = c(0.35, 1.5)) +
labs(
title = "North Atlantic and Northeast Pacific Cyclones by Basin",
x = "Longitude",
y = "Latitude"
) +
scale_x_continuous(breaks = c(-180, -90, 0, 90, 180)) +
scale_y_continuous(breaks = c(-90, -45, 0, 45, 90)) +
theme_minimal()
ggplot(cyclones_data) +
aes(x = ObservYear, y = MonthName, fill = ..count..) +
geom_bin2d() +
scale_fill_distiller(direction = 1, palette = "YlOrRd") +
labs(
title = "Storm Frequency by Month and Year",
x = "Observation Year",
y = "Month",
fill = "Frequency"
) +
theme_minimal()
ggplot(cyclones_data) +
aes(x = ObservYear, fill = category) +
geom_bar(position = "fill", width = 1) +
labs(
title = "Proportion of Storm Categories Over Time",
x = "Observation Year",
y = "Proportion",
fill = "Storm Category"
) +
theme_minimal()
happiness_colors <- c("1" = "#000000", "3" = "#aa0000", "4" = "#f46d43",
"5" = "#fdae61", "6" = "#fee08b", "7" = "#66bd63",
"8" = "#1a9850")
ggplot(happiness_mapped) +
aes(x = long, y = lat, group = group, fill = factor(round(life_ladder))) +
geom_polygon(color = "white") +
scale_fill_manual(values = happiness_colors, name = "Happiness\nScore") +
theme_void() +
labs(title = "World Happiness Scores by Country")
# This is an example of how you can control figures and captions in
# an R chunk. Note that you can reference figures using:
# \@ref(fig:insight1), where "insight1" is the label of this code
# chunk (the first bit of text after the "r" in "```{r label, options...}")
world_map <- map_data("world")
ggplot() +
geom_polygon(data = world_map, aes(x = long, y = lat, group = group), fill = "lightgray", color = "white") +
# hurricanes +-5 of equator are extremely rare
geom_rect(aes(xmin = -180, xmax = 180, ymin = -5, ymax = 5), fill = "red", alpha = 0.2) +
geom_hex(data = cyclones_data, aes(x = long, y = lat, fill = category), bins = 50, alpha = 0.7) +
scale_fill_viridis_d(name = "Storm Category") +
labs(
title = "North Atlantic and Northeast Pacific Cyclones by Category",
x = "Longitude",
y = "Latitude"
) +
scale_x_continuous(breaks = c(-180, -90, 0, 90, 180)) +
scale_y_continuous(breaks = c(-90, -45, 0, 45, 90)) +
theme_minimal()
total_storms_affected <- sum(cyclone_affected_countries$num_unique_storms)
total_storms_unaffected <- nrow(cyclone_unaffected_countries)
climate_awareness_weighted <- climate_awareness_summary |>
group_by(group) |>
summarize(
aware_alittle = sum(aware_alittle, na.rm = TRUE),
aware_alot = sum(aware_alot, na.rm = TRUE),
aware_moderate = sum(aware_moderate, na.rm = TRUE),
aware_no = sum(aware_no, na.rm = TRUE),
aware_refuse = sum(aware_refuse, na.rm = TRUE),
.groups = "drop"
) |>
pivot_longer(
cols = c(aware_alittle, aware_alot, aware_moderate, aware_no, aware_refuse),
names_to = "awareness_level",
values_to = "weighted_average"
) |>
mutate(
average = case_when(
group == "Affected" ~ weighted_average / total_storms_affected,
group == "Unaffected" ~ weighted_average / total_storms_unaffected
)
)
ggplot(climate_awareness_weighted, aes(x = awareness_level, y = average, fill = group)) +
geom_bar(stat = "identity") +
scale_y_log10() +
labs(
title = "Weighted Climate Awareness by Cyclone Impact",
x = "Awareness Level",
y = "Weighted Average",
fill = "Cyclone Impact"
) +
theme_minimal()
# Put in your code to load in the data set, along with any
# necessary cleaning beyond what was done in Part 1
world_map <- map_data("world")
climate_awareness <- read_parquet("climate_awareness.parquet")
climate_awareness <- climate_awareness |>
mutate(country = case_when(
country == "United.States" ~ "United States of America",
country == "United.Kingdom" ~ "UK",
country == "United.Arab.Emirates" ~ "UAE",
country == "Trinidad.and.Tobago" ~ "Trinidad",
country == "Sri.Lanka" ~ "Sri Lanka",
country == "Bolivia.(Plurinational.State.of)" ~ "Bolivia",
country == "Bosnia.and.Herzegovina" ~ "Bosnia",
country == "Congo.(Democratic.Republic.of.the)" ~ "Congo",
country == "Costa.Rica" ~ "Costa Rica",
country == "Cote.d'Ivoire" ~ "Ivory Coast",
country == "Czechia" ~ "Czech Republic",
country == "Dominican.Republic" ~ "Dominican Republic",
country == "El.Salvador" ~ "El Salvador",
country == "Hong.Kong" ~ "Hong Kong",
country == "Lao.People's.Democratic.Republic" ~ "Laos",
country == "New.Zealand" ~ "New Zealand",
country == "Puerto.Rico" ~ "Puerto Rico",
country == "North.MAcedonia" ~ "Macedonia",
country == "Saudi.Arabia" ~ "Saudi Arabia",
country == "South.Africa" ~ "South Africa",
country == "South.Korea" ~ "South Korea",
country == "Antigua" ~ "Antigua and Barbuda",
TRUE ~ country
))
climate_awareness_mapped <- climate_awareness |>
right_join(world_map, by = c("country" = "region"))
climate_awareness
# Calculate the relevant summary statistics here.
# Note that the "kable" function in the "knitr" package
# is convenient for making nice tables. Other packages can
# do much fancier things with tables, but keep in mind that
# the insights should be the star, not the formatting.
ggplot(happiness_mapped) +
aes(x = long, y = lat, group = group, fill = perceptions_of_corruption) +
geom_polygon(color = "darkgrey") +
theme_void() +
theme(plot.background = element_rect(fill = "grey", color = NA), legend.position = "bottom", legend.direction = "horizontal") +
labs(title = "Perception of Corruption by Country", fill = "Perceived\nCorruption") +
scale_fill_distiller(palette = "PRGn")
cyclones_data <- cyclones_data |>
mutate(MonthName = factor(month.abb[Month], levels = month.abb)) |>
relocate(MonthName, .after = Month)
ggplot() +
geom_polygon(data = world_map, aes(x = long, y = lat, group = group), fill = "lightgray", color = "white") +
geom_rect(aes(xmin = -180, xmax = 180, ymin = -5, ymax = 5), fill = "red", alpha = 0.2) +
geom_hex(data = cyclones_data, aes(x = long, y = lat, fill = Basin, alpha = ..count..), bins = 50) +
scale_fill_viridis_d(name = "Storm Category") +
scale_alpha(range = c(0.35, 1.5)) +
labs(
title = "North Atlantic and Northeast Pacific Cyclones by Basin",
x = "Longitude",
y = "Latitude"
) +
scale_x_continuous(breaks = c(-180, -90, 0, 90, 180)) +
scale_y_continuous(breaks = c(-90, -45, 0, 45, 90)) +
theme_minimal()
ggplot(cyclones_data) +
aes(x = ObservYear, y = MonthName, fill = ..count..) +
geom_bin2d() +
scale_fill_distiller(direction = 1, palette = "YlOrRd") +
labs(
title = "Storm Frequency by Month and Year",
x = "Observation Year",
y = "Month",
fill = "Frequency"
) +
theme_minimal()
ggplot(cyclones_data) +
aes(x = ObservYear, fill = category) +
geom_bar(position = "fill", width = 1) +
labs(
title = "Proportion of Storm Categories Over Time",
x = "Observation Year",
y = "Proportion",
fill = "Storm Category"
) +
theme_minimal()
happiness_colors <- c("1" = "#000000", "3" = "#aa0000", "4" = "#f46d43",
"5" = "#fdae61", "6" = "#fee08b", "7" = "#66bd63",
"8" = "#1a9850")
ggplot(happiness_mapped) +
aes(x = long, y = lat, group = group, fill = factor(round(life_ladder))) +
geom_polygon(color = "white") +
scale_fill_manual(values = happiness_colors, name = "Happiness\nScore") +
theme_void() +
labs(title = "World Happiness Scores by Country")
# Put in your code to load in the data set, along with any
# necessary cleaning beyond what was done in Part 1
happiness <- read_parquet("happiness.parquet")
happiness_mapped <- happiness |>
mutate(country = case_when( #match country names to world_map
country == "United States" ~ "USA",
country == "United Kingdom" ~ "UK",
country == "Congo (Brazzaville)" ~ "Congo",
country == "Congo (Kinshasa)" ~ "Congo",
country == "Hong Kong S.A.R. of China" ~ "Hong Kong",
country == "Türkiye" ~ "Turkey",
country == "Lao.People's.Democratic.Republic" ~ "Laos",
country == "United Arab Emirates" ~ "UAE",
TRUE ~ country
)) |>
right_join(world_map, by = c("country" = "region")) #joins the long and lat of the respective countries to map them
happiness
# Calculate the relevant summary statistics here.
# Note that the "kable" function in the "knitr" package
# is convenient for making nice tables. Other packages can
# do much fancier things with tables, but keep in mind that
# the insights should be the star, not the formatting.
ggplot(happiness_mapped) +
aes(x = long, y = lat, group = group, fill = perceptions_of_corruption) +
geom_polygon(color = "darkgrey") +
theme_void() +
theme(plot.background = element_rect(fill = "grey", color = NA), legend.position = "bottom", legend.direction = "horizontal") +
labs(title = "Perception of Corruption by Country", fill = "Perceived\nCorruption") +
scale_fill_distiller(palette = "PRGn")
#ice_extent
# Put in your code to load in the data set, along with any
# necessary cleaning beyond what was done in Part 1
cyclones_data <- read_parquet("cyclones_data.parquet")
# Convert latitude(-90/+90) and longitude(-180/+180) to be within the correct range
cyclones_data <- cyclones_data |>
rename(long = lon) |> #rename lon to long to match with world map
mutate(
lat = ((lat + 90) %% 180) - 90,
long = ((long + 180) %% 360) - 180
)
cyclones_data
countries_with_cyclones <- data.frame(
country = c(
"United States of America", "Dominican Republic", "Haiti", "Cuba", "Canada", "Puerto Rico",
"Mexico", "The Bahamas", "Guatemala", "Jamaica", "Nicaragua", "Colombia", "United Kingdom",
"Ireland", "France", "Costa Rica", "Honduras", "Belize", "Antigua and Barbuda", "El Salvador",
"Iceland", "Cabo Verde", "Greenland", "Saint Lucia", "Anguilla", "Norway", "Portugal", "Spain",
"Dominica", "Sweden", "Finland", "Russia", "Panama", "Senegal", "Curaçao", "Guinea", "Venezuela",
"Trinidad and Tobago", "British Virgin Islands", "Morocco", "Algeria", "Grenada",
"Turks and Caicos Islands", "Barbados", "Saint Vincent and the Grenadines", "Japan"
)
)
countries_with_cyclones <- countries_with_cyclones |>
left_join(
cyclone_countries |>
rename(country = admin) |>
group_by(country) |>
mutate(
storm_id = cumsum(c(TRUE, diff(Number) != 0))
) |>
summarise(num_unique_storms = n_distinct(storm_id)),
by = "country"
)
countries_with_cyclones
# Note that the code in this document will not be shown
# when you click "knit", so the placement of this code
# chunk is purely for your benefit: You can see what happened
# with your data, which makes it easier to describe below!
#ice_extent
# Put in your code to load in the data set, along with any
# necessary cleaning beyond what was done in Part 1
cyclones_data <- read_parquet("cyclones_data.parquet")
# Convert latitude(-90/+90) and longitude(-180/+180) to be within the correct range
cyclones_data <- cyclones_data |>
rename(long = lon) |> #rename lon to long to match with world map
mutate(
lat = ((lat + 90) %% 180) - 90,
long = ((long + 180) %% 360) - 180
)
cyclones_data
countries_with_cyclones <- data.frame(
country = c(
"USA", "Dominican Republic", "Haiti", "Cuba", "Canada", "Puerto Rico",
"Mexico", "The Bahamas", "Guatemala", "Jamaica", "Nicaragua", "Colombia", "United Kingdom",
"Ireland", "France", "Costa Rica", "Honduras", "Belize", "Antigua and Barbuda", "El Salvador",
"Iceland", "Cabo Verde", "Greenland", "Saint Lucia", "Anguilla", "Norway", "Portugal", "Spain",
"Dominica", "Sweden", "Finland", "Russia", "Panama", "Senegal", "Curaçao", "Guinea", "Venezuela",
"Trinidad and Tobago", "British Virgin Islands", "Morocco", "Algeria", "Grenada",
"Turks and Caicos Islands", "Barbados", "Saint Vincent and the Grenadines", "Japan"
)
)
countries_with_cyclones <- countries_with_cyclones |>
left_join(
cyclone_countries |>
rename(country = admin) |>
group_by(country) |>
mutate(
storm_id = cumsum(c(TRUE, diff(Number) != 0))
) |>
summarise(num_unique_storms = n_distinct(storm_id)),
by = "country"
)
countries_with_cyclones
# Note that the code in this document will not be shown
# when you click "knit", so the placement of this code
# chunk is purely for your benefit: You can see what happened
# with your data, which makes it easier to describe below!
#ice_extent
# Put in your code to load in the data set, along with any
# necessary cleaning beyond what was done in Part 1
cyclones_data <- read_parquet("cyclones_data.parquet")
# Convert latitude(-90/+90) and longitude(-180/+180) to be within the correct range
cyclones_data <- cyclones_data |>
rename(long = lon) |> #rename lon to long to match with world map
mutate(
lat = ((lat + 90) %% 180) - 90,
long = ((long + 180) %% 360) - 180
)
cyclones_data
countries_with_cyclones <- data.frame(
country = c(
"United States of America", "Dominican Republic", "Haiti", "Cuba", "Canada", "Puerto Rico",
"Mexico", "The Bahamas", "Guatemala", "Jamaica", "Nicaragua", "Colombia", "United Kingdom",
"Ireland", "France", "Costa Rica", "Honduras", "Belize", "Antigua and Barbuda", "El Salvador",
"Iceland", "Cabo Verde", "Greenland", "Saint Lucia", "Anguilla", "Norway", "Portugal", "Spain",
"Dominica", "Sweden", "Finland", "Russia", "Panama", "Senegal", "Curaçao", "Guinea", "Venezuela",
"Trinidad and Tobago", "British Virgin Islands", "Morocco", "Algeria", "Grenada",
"Turks and Caicos Islands", "Barbados", "Saint Vincent and the Grenadines", "Japan"
)
)
countries_with_cyclones <- countries_with_cyclones |>
left_join(
cyclone_countries |>
rename(country = admin) |>
group_by(country) |>
mutate(
storm_id = cumsum(c(TRUE, diff(Number) != 0))
) |>
summarise(num_unique_storms = n_distinct(storm_id)),
by = "country"
)
countries_with_cyclones
# Note that the code in this document will not be shown
# when you click "knit", so the placement of this code
# chunk is purely for your benefit: You can see what happened
# with your data, which makes it easier to describe below!
#ice_extent
# Put in your code to load in the data set, along with any
# necessary cleaning beyond what was done in Part 1
cyclones_data <- read_parquet("cyclones_data.parquet")
# Convert latitude(-90/+90) and longitude(-180/+180) to be within the correct range
cyclones_data <- cyclones_data |>
rename(long = lon) |> #rename lon to long to match with world map
mutate(
lat = ((lat + 90) %% 180) - 90,
long = ((long + 180) %% 360) - 180
)
cyclones_data
countries_with_cyclones <- data.frame(
country = c(
"United States of America", "Dominican Republic", "Haiti", "Cuba", "Canada", "Puerto Rico",
"Mexico", "The Bahamas", "Guatemala", "Jamaica", "Nicaragua", "Colombia", "United Kingdom",
"Ireland", "France", "Costa Rica", "Honduras", "Belize", "Antigua and Barbuda", "El Salvador",
"Iceland", "Cabo Verde", "Greenland", "Saint Lucia", "Anguilla", "Norway", "Portugal", "Spain",
"Dominica", "Sweden", "Finland", "Russia", "Panama", "Senegal", "Curaçao", "Guinea", "Venezuela",
"Trinidad and Tobago", "British Virgin Islands", "Morocco", "Algeria", "Grenada",
"Turks and Caicos Islands", "Barbados", "Saint Vincent and the Grenadines", "Japan"
)
)
countries_with_cyclones <- countries_with_cyclones |>
left_join(
cyclone_countries |>
rename(country = admin) |>
group_by(country) |>
mutate(
storm_id = cumsum(c(TRUE, diff(Number) != 0))
) |>
summarise(num_unique_storms = n_distinct(storm_id)),
by = "country") |>
mutate(country = case_when(
country == "United.States" ~ "United States of America"))
countries_with_cyclones
# Note that the code in this document will not be shown
# when you click "knit", so the placement of this code
# chunk is purely for your benefit: You can see what happened
# with your data, which makes it easier to describe below!
#ice_extent
# Put in your code to load in the data set, along with any
# necessary cleaning beyond what was done in Part 1
cyclones_data <- read_parquet("cyclones_data.parquet")
# Convert latitude(-90/+90) and longitude(-180/+180) to be within the correct range
cyclones_data <- cyclones_data |>
rename(long = lon) |> #rename lon to long to match with world map
mutate(
lat = ((lat + 90) %% 180) - 90,
long = ((long + 180) %% 360) - 180
)
cyclones_data
countries_with_cyclones <- data.frame(
country = c(
"United States of America", "Dominican Republic", "Haiti", "Cuba", "Canada", "Puerto Rico",
"Mexico", "The Bahamas", "Guatemala", "Jamaica", "Nicaragua", "Colombia", "United Kingdom",
"Ireland", "France", "Costa Rica", "Honduras", "Belize", "Antigua and Barbuda", "El Salvador",
"Iceland", "Cabo Verde", "Greenland", "Saint Lucia", "Anguilla", "Norway", "Portugal", "Spain",
"Dominica", "Sweden", "Finland", "Russia", "Panama", "Senegal", "Curaçao", "Guinea", "Venezuela",
"Trinidad and Tobago", "British Virgin Islands", "Morocco", "Algeria", "Grenada",
"Turks and Caicos Islands", "Barbados", "Saint Vincent and the Grenadines", "Japan"
)
)
countries_with_cyclones <- countries_with_cyclones |>
left_join(
cyclone_countries |>
rename(country = admin) |>
group_by(country) |>
mutate(
storm_id = cumsum(c(TRUE, diff(Number) != 0))
) |>
summarise(num_unique_storms = n_distinct(storm_id)),
by = "country") |>
mutate(country = case_when(
country == "United.States" ~ "United States of America"))
countries_with_cyclones
# Note that the code in this document will not be shown
# when you click "knit", so the placement of this code
# chunk is purely for your benefit: You can see what happened
# with your data, which makes it easier to describe below!
