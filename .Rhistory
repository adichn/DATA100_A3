labs(
title = "Life Ladder vs Antarctic Max Ice Extent (2023)",
x = "Antarctic Max Ice Extent",
y = "Life Ladder"
) +
theme_minimal()
# Plot life_ladder vs Arctic min and max ice extents
p3 <- ggplot(happiness_ice, aes(x = min[region == "Arctic"], y = life_ladder)) +
geom_point() +
labs(
title = "Life Ladder vs Arctic Min Ice Extent (2023)",
x = "Arctic Min Ice Extent",
y = "Life Ladder"
) +
theme_minimal()
p4 <- ggplot(happiness_ice, aes(x = max[region == "Arctic"], y = life_ladder)) +
geom_point() +
labs(
title = "Life Ladder vs Arctic Max Ice Extent (2023)",
x = "Arctic Max Ice Extent",
y = "Life Ladder"
) +
theme_minimal()
happiness
# Put in your code to load in the data set, along with any
# necessary cleaning beyond what was done in Part 1
happiness <- read_parquet("happiness.parquet")
happiness_mapped <- happiness |>
mutate(country = case_when( #match country names to world_map
country == "United States" ~ "United States of America",
country == "United Kingdom" ~ "UK",
country == "Congo (Brazzaville)" ~ "Congo",
country == "Congo (Kinshasa)" ~ "Congo",
country == "Hong Kong S.A.R. of China" ~ "Hong Kong",
country == "T端rkiye" ~ "Turkey",
country == "Lao.People's.Democratic.Republic" ~ "Laos",
country == "United Arab Emirates" ~ "UAE",
TRUE ~ country
)) |>
right_join(world_map, by = c("country" = "region")) #joins the long and lat of the respective countries to map them
happiness
world <- ne_countries(scale = "medium", returnclass = "sf")
equator <- st_sfc(st_linestring(rbind(c(-180, 0), c(180, 0))), crs = st_crs(world))
world <- st_transform(world, crs = 3857)
equator <- st_transform(equator, crs = 3857)
happiness <- happiness %>%
left_join(
world %>%
mutate(
centroid = st_centroid(geometry),
latitude = st_coordinates(centroid)[, 2],
hemisphere = ifelse(latitude > 0, "North", "South"),
distance_to_equator_km = as.numeric(st_distance(centroid, equator)) / 1000
) %>%
select(name, hemisphere, distance_to_equator_km) %>%
rename(country = name),
by = "country"
)
happiness_2023 <- happiness %>% filter(year == 2023)
ice_extent_2023 <- ice_extent_yearly %>% filter(year == 2023)
# Pivot ice extent data to wide format for min and max values by region
ice_extent_2023_wide <- ice_extent_2023 %>%
pivot_wider(names_from = name, values_from = value)
# Merge happiness and ice extent data
happiness_ice <- happiness_2023 %>%
left_join(ice_extent_2023_wide, by = character(0))  # Cross join
# Plot life_ladder vs Antarctic min and max ice extents
ggplot(happiness_ice, aes(x = min[region == "Antarctic"], y = life_ladder)) +
geom_point() +
labs(
title = "Life Ladder vs Antarctic Min Ice Extent (2023)",
x = "Antarctic Min Ice Extent",
y = "Life Ladder"
) +
theme_minimal()
# Put in your code to load in the data set, along with any
# necessary cleaning beyond what was done in Part 1
happiness <- read_parquet("happiness.parquet")
happiness_mapped <- happiness |>
mutate(country = case_when( #match country names to world_map
country == "United States" ~ "United States of America",
country == "United Kingdom" ~ "UK",
country == "Congo (Brazzaville)" ~ "Congo",
country == "Congo (Kinshasa)" ~ "Congo",
country == "Hong Kong S.A.R. of China" ~ "Hong Kong",
country == "T端rkiye" ~ "Turkey",
country == "Lao.People's.Democratic.Republic" ~ "Laos",
country == "United Arab Emirates" ~ "UAE",
TRUE ~ country
)) |>
right_join(world_map, by = c("country" = "region")) #joins the long and lat of the respective countries to map them
happiness
world <- ne_countries(scale = "medium", returnclass = "sf")
equator <- st_sfc(st_linestring(rbind(c(-180, 0), c(180, 0))), crs = st_crs(world))
world <- st_transform(world, crs = 3857)
equator <- st_transform(equator, crs = 3857)
happiness <- happiness %>%
left_join(
world %>%
mutate(
centroid = st_centroid(geometry),
latitude = st_coordinates(centroid)[, 2],
hemisphere = ifelse(latitude > 0, "North", "South"),
distance_to_equator_km = as.numeric(st_distance(centroid, equator)) / 1000
) %>%
select(name, hemisphere, distance_to_equator_km) %>%
rename(country = name),
by = "country"
)
happiness_2023 <- happiness %>% filter(year == 2023)
ice_extent_2023 <- ice_extent_yearly %>% filter(year == 2023)
# Pivot ice extent data to wide format for min and max values by region
ice_extent_2023_wide <- ice_extent_2023 %>%
pivot_wider(names_from = name, values_from = value)
# Cross-join happiness with ice extent data for each region
happiness_antarctic <- happiness_2023 %>%
mutate(region = "Antarctic") %>%
left_join(ice_extent_2023_wide %>% filter(region == "Antarctic"), by = character(0))
happiness_arctic <- happiness_2023 %>%
mutate(region = "Arctic") %>%
left_join(ice_extent_2023_wide %>% filter(region == "Arctic"), by = character(0))
# Plot 1: Life Ladder vs Antarctic Min Ice Extent
ggplot(happiness_antarctic, aes(x = min, y = life_ladder)) +
geom_point() +
labs(
title = "Life Ladder vs Antarctic Min Ice Extent (2023)",
x = "Antarctic Min Ice Extent",
y = "Life Ladder"
) +
theme_minimal()
# Plot 2: Life Ladder vs Antarctic Max Ice Extent
ggplot(happiness_antarctic, aes(x = max, y = life_ladder)) +
geom_point() +
labs(
title = "Life Ladder vs Antarctic Max Ice Extent (2023)",
x = "Antarctic Max Ice Extent",
y = "Life Ladder"
) +
theme_minimal()
# Plot 3: Life Ladder vs Arctic Min Ice Extent
ggplot(happiness_arctic, aes(x = min, y = life_ladder)) +
geom_point() +
labs(
title = "Life Ladder vs Arctic Min Ice Extent (2023)",
x = "Arctic Min Ice Extent",
y = "Life Ladder"
) +
theme_minimal()
# Plot 4: Life Ladder vs Arctic Max Ice Extent
ggplot(happiness_arctic, aes(x = max, y = life_ladder)) +
geom_point() +
labs(
title = "Life Ladder vs Arctic Max Ice Extent (2023)",
x = "Arctic Max Ice Extent",
y = "Life Ladder"
) +
theme_minimal()
happiness
# Put in your code to load in the data set, along with any
# necessary cleaning beyond what was done in Part 1
happiness <- read_parquet("happiness.parquet")
happiness_mapped <- happiness |>
mutate(country = case_when( #match country names to world_map
country == "United States" ~ "United States of America",
country == "United Kingdom" ~ "UK",
country == "Congo (Brazzaville)" ~ "Congo",
country == "Congo (Kinshasa)" ~ "Congo",
country == "Hong Kong S.A.R. of China" ~ "Hong Kong",
country == "T端rkiye" ~ "Turkey",
country == "Lao.People's.Democratic.Republic" ~ "Laos",
country == "United Arab Emirates" ~ "UAE",
TRUE ~ country
)) |>
right_join(world_map, by = c("country" = "region")) #joins the long and lat of the respective countries to map them
happiness
world <- ne_countries(scale = "medium", returnclass = "sf")
equator <- st_sfc(st_linestring(rbind(c(-180, 0), c(180, 0))), crs = st_crs(world))
world <- st_transform(world, crs = 3857)
equator <- st_transform(equator, crs = 3857)
happiness <- happiness %>%
left_join(
world %>%
mutate(
centroid = st_centroid(geometry),
latitude = st_coordinates(centroid)[, 2],
hemisphere = ifelse(latitude > 0, "North", "South"),
distance_to_equator_km = as.numeric(st_distance(centroid, equator)) / 1000
) %>%
select(name, hemisphere, distance_to_equator_km) %>%
rename(country = name),
by = "country"
)
happiness_2023 <- happiness %>% filter(year == 2023)
ice_extent_2023 <- ice_extent_yearly %>% filter(year == 2023)
# Pivot ice extent data to wide format for min and max values by region
ice_extent_2023_wide <- ice_extent_2023 %>%
pivot_wider(names_from = name, values_from = value)
# Cross-join happiness with ice extent data for each region
happiness_antarctic <- happiness_2023 %>%
mutate(region = "Antarctic") %>%
left_join(ice_extent_2023_wide %>% filter(region == "Antarctic"), by = character(0))
happiness_arctic <- happiness_2023 %>%
mutate(region = "Arctic") %>%
left_join(ice_extent_2023_wide %>% filter(region == "Arctic"), by = character(0))
# Antarctic Min Ice Extent Violin Plot
ggplot(happiness_antarctic, aes(x = factor(region), y = life_ladder)) +
geom_violin() +
geom_vline(aes(xintercept = min), color = "blue", linetype = "dashed") +
labs(
title = "Life Ladder vs Antarctic Min Ice Extent (2023)",
x = "Region",
y = "Life Ladder"
) +
theme_minimal()
# Put in your code to load in the data set, along with any
# necessary cleaning beyond what was done in Part 1
climate_awareness <- read_parquet("climate_awareness.parquet")
climate_awareness <- climate_awareness |>
mutate(country = case_when(
country == "United.States" ~ "United States of America",
country == "United.Kingdom" ~ "UK",
country == "United.Arab.Emirates" ~ "UAE",
country == "Trinidad.and.Tobago" ~ "Trinidad",
country == "Sri.Lanka" ~ "Sri Lanka",
country == "Bolivia.(Plurinational.State.of)" ~ "Bolivia",
country == "Bosnia.and.Herzegovina" ~ "Bosnia",
country == "Congo.(Democratic.Republic.of.the)" ~ "Congo",
country == "Costa.Rica" ~ "Costa Rica",
country == "Cote.d'Ivoire" ~ "Ivory Coast",
country == "Czechia" ~ "Czech Republic",
country == "Dominican.Republic" ~ "Dominican Republic",
country == "El.Salvador" ~ "El Salvador",
country == "Hong.Kong" ~ "Hong Kong",
country == "Lao.People's.Democratic.Republic" ~ "Laos",
country == "New.Zealand" ~ "New Zealand",
country == "Puerto.Rico" ~ "Puerto Rico",
country == "North.MAcedonia" ~ "Macedonia",
country == "Saudi.Arabia" ~ "Saudi Arabia",
country == "South.Africa" ~ "South Africa",
country == "South.Korea" ~ "South Korea",
country == "Antigua" ~ "Antigua and Barbuda",
TRUE ~ country
))
climate_awareness_mapped <- climate_awareness |>
right_join(world_map, by = c("country" = "region"))
climate_awareness
# Put in your code to load in the data set, along with any
# necessary cleaning beyond what was done in Part 1
happiness <- read_parquet("happiness.parquet")
happiness_mapped <- happiness |>
mutate(country = case_when( #match country names to world_map
country == "United States" ~ "United States of America",
country == "United Kingdom" ~ "UK",
country == "Congo (Brazzaville)" ~ "Congo",
country == "Congo (Kinshasa)" ~ "Congo",
country == "Hong Kong S.A.R. of China" ~ "Hong Kong",
country == "T端rkiye" ~ "Turkey",
country == "Lao.People's.Democratic.Republic" ~ "Laos",
country == "United Arab Emirates" ~ "UAE",
TRUE ~ country
)) |>
right_join(world_map, by = c("country" = "region")) #joins the long and lat of the respective countries to map them
happiness
world <- ne_countries(scale = "medium", returnclass = "sf")
equator <- st_sfc(st_linestring(rbind(c(-180, 0), c(180, 0))), crs = st_crs(world))
world <- st_transform(world, crs = 3857)
equator <- st_transform(equator, crs = 3857)
happiness <- happiness %>%
left_join(
world %>%
mutate(
centroid = st_centroid(geometry),
latitude = st_coordinates(centroid)[, 2],
hemisphere = ifelse(latitude > 0, "North", "South"),
distance_to_equator_km = as.numeric(st_distance(centroid, equator)) / 1000
) %>%
select(name, hemisphere, distance_to_equator_km) %>%
rename(country = name),
by = "country"
)
happiness_2023 <- happiness %>% filter(year == 2023)
ice_extent_2023 <- ice_extent_yearly %>% filter(year == 2023)
# Pivot ice extent data to wide format for min and max values by region
ice_extent_2023_wide <- ice_extent_2023 %>%
pivot_wider(names_from = name, values_from = value)
# Cross-join happiness with ice extent data for each region
happiness_antarctic <- happiness_2023 %>%
mutate(region = "Antarctic") %>%
left_join(ice_extent_2023_wide %>% filter(region == "Antarctic"), by = character(0))
happiness_arctic <- happiness_2023 %>%
mutate(region = "Arctic") %>%
left_join(ice_extent_2023_wide %>% filter(region == "Arctic"), by = character(0))
# Antarctic Min Ice Extent Violin Plot
ggplot(happiness_antarctic, aes(x = factor(region), y = life_ladder)) +
geom_violin() +
geom_vline(aes(xintercept = min), color = "blue", linetype = "dashed") +
labs(
title = "Life Ladder vs Antarctic Min Ice Extent (2023)",
x = "Region",
y = "Life Ladder"
) +
theme_minimal()
# Put in your code to load in the data set, along with any
# necessary cleaning beyond what was done in Part 1
happiness <- read_parquet("happiness.parquet")
happiness_mapped <- happiness |>
mutate(country = case_when( #match country names to world_map
country == "United States" ~ "United States of America",
country == "United Kingdom" ~ "UK",
country == "Congo (Brazzaville)" ~ "Congo",
country == "Congo (Kinshasa)" ~ "Congo",
country == "Hong Kong S.A.R. of China" ~ "Hong Kong",
country == "T端rkiye" ~ "Turkey",
country == "Lao.People's.Democratic.Republic" ~ "Laos",
country == "United Arab Emirates" ~ "UAE",
TRUE ~ country
)) |>
right_join(world_map, by = c("country" = "region")) #joins the long and lat of the respective countries to map them
happiness
world <- ne_countries(scale = "medium", returnclass = "sf")
equator <- st_sfc(st_linestring(rbind(c(-180, 0), c(180, 0))), crs = st_crs(world))
world <- st_transform(world, crs = 3857)
equator <- st_transform(equator, crs = 3857)
happiness <- happiness %>%
left_join(
world %>%
mutate(
centroid = st_centroid(geometry),
latitude = st_coordinates(centroid)[, 2],
hemisphere = ifelse(latitude > 0, "North", "South"),
distance_to_equator_km = as.numeric(st_distance(centroid, equator)) / 1000
) %>%
select(name, hemisphere, distance_to_equator_km) %>%
rename(country = name),
by = "country"
)
happiness_2023 <- happiness %>% filter(year == 2023)
ice_extent_2023 <- ice_extent_yearly %>% filter(year == 2023)
# Pivot ice extent data to wide format for min and max values by region
ice_extent_2023_wide <- ice_extent_2023 %>%
pivot_wider(names_from = name, values_from = value)
# Cross-join happiness with ice extent data for each region
happiness_antarctic <- happiness_2023 %>%
mutate(region = "Antarctic") %>%
left_join(ice_extent_2023_wide %>% filter(region == "Antarctic"), by = character(0))
happiness_arctic <- happiness_2023 %>%
mutate(region = "Arctic") %>%
left_join(ice_extent_2023_wide %>% filter(region == "Arctic"), by = character(0))
# Antarctic Min Ice Extent Violin Plot
ggplot(happiness_antarctic, aes(x = "Antarctic", y = life_ladder)) +
geom_violin() +
geom_vline(aes(xintercept = min), color = "blue", linetype = "dashed") +
labs(
title = "Life Ladder vs Antarctic Min Ice Extent (2023)",
x = "Region",
y = "Life Ladder"
) +
theme_minimal()
# Antarctic Max Ice Extent Violin Plot
ggplot(happiness_antarctic, aes(x = "Antarctic", y = life_ladder)) +
geom_violin() +
geom_vline(aes(xintercept = max), color = "red", linetype = "dashed") +
labs(
title = "Life Ladder vs Antarctic Max Ice Extent (2023)",
x = "Region",
y = "Life Ladder"
) +
theme_minimal()
# Arctic Min Ice Extent Violin Plot
ggplot(happiness_antarctic, aes(x = "Arctic", y = life_ladder)) +
geom_violin() +
geom_vline(aes(xintercept = min), color = "blue", linetype = "dashed") +
labs(
title = "Life Ladder vs Arctic Min Ice Extent (2023)",
x = "Region",
y = "Life Ladder"
) +
theme_minimal()
# Arctic Max Ice Extent Violin Plot
ggplot(happiness_antarctic, aes(x = "Arctic", y = life_ladder)) +
geom_violin() +
geom_vline(aes(xintercept = max), color = "red", linetype = "dashed") +
labs(
title = "Life Ladder vs Arctic Max Ice Extent (2023)",
x = "Region",
y = "Life Ladder"
) +
theme_minimal()
happiness
# Put in your code to load in the data set, along with any
# necessary cleaning beyond what was done in Part 1
happiness <- read_parquet("happiness.parquet")
happiness_mapped <- happiness |>
mutate(country = case_when( #match country names to world_map
country == "United States" ~ "United States of America",
country == "United Kingdom" ~ "UK",
country == "Congo (Brazzaville)" ~ "Congo",
country == "Congo (Kinshasa)" ~ "Congo",
country == "Hong Kong S.A.R. of China" ~ "Hong Kong",
country == "T端rkiye" ~ "Turkey",
country == "Lao.People's.Democratic.Republic" ~ "Laos",
country == "United Arab Emirates" ~ "UAE",
TRUE ~ country
)) |>
right_join(world_map, by = c("country" = "region")) #joins the long and lat of the respective countries to map them
happiness
world <- ne_countries(scale = "medium", returnclass = "sf")
equator <- st_sfc(st_linestring(rbind(c(-180, 0), c(180, 0))), crs = st_crs(world))
world <- st_transform(world, crs = 3857)
equator <- st_transform(equator, crs = 3857)
happiness <- happiness %>%
left_join(
world %>%
mutate(
centroid = st_centroid(geometry),
latitude = st_coordinates(centroid)[, 2],
hemisphere = ifelse(latitude > 0, "North", "South"),
distance_to_equator_km = as.numeric(st_distance(centroid, equator)) / 1000
) %>%
select(name, hemisphere, distance_to_equator_km) %>%
rename(country = name),
by = "country"
)
happiness
ice_extent_2023 <- ice_extent_yearly %>%
filter(year == 2023) %>%
pivot_wider(names_from = name, values_from = value, names_prefix = "ice_extent_")
# Add max and min ice extents for both Arctic and Antarctic to the happiness dataset
happiness_2023 <- happiness_2023 %>%
left_join(ice_extent_2023 %>% filter(region == "Arctic"), by = character(0)) %>%
rename(ice_extent_arctic_min = ice_extent_min, ice_extent_arctic_max = ice_extent_max) %>%
left_join(ice_extent_2023 %>% filter(region == "Antarctic"), by = character(0)) %>%
rename(ice_extent_antarctic_min = ice_extent_min, ice_extent_antarctic_max = ice_extent_max)
# Plot 1: Life Ladder vs Distance to Arctic and Antarctic
ggplot(happiness_2023) +
geom_point(aes(x = distance_to_arctic_km, y = life_ladder, color = "Arctic")) +
geom_point(aes(x = distance_to_antarctic_km, y = life_ladder, color = "Antarctic")) +
labs(
title = "Life Ladder vs Distance to Arctic and Antarctic",
x = "Distance to Pole (km)",
y = "Life Ladder",
color = "Pole"
) +
theme_minimal()
# Put in your code to load in the data set, along with any
# necessary cleaning beyond what was done in Part 1
happiness <- read_parquet("happiness.parquet")
happiness_mapped <- happiness |>
mutate(country = case_when( #match country names to world_map
country == "United States" ~ "United States of America",
country == "United Kingdom" ~ "UK",
country == "Congo (Brazzaville)" ~ "Congo",
country == "Congo (Kinshasa)" ~ "Congo",
country == "Hong Kong S.A.R. of China" ~ "Hong Kong",
country == "T端rkiye" ~ "Turkey",
country == "Lao.People's.Democratic.Republic" ~ "Laos",
country == "United Arab Emirates" ~ "UAE",
TRUE ~ country
)) |>
right_join(world_map, by = c("country" = "region")) #joins the long and lat of the respective countries to map them
happiness
world <- ne_countries(scale = "medium", returnclass = "sf")
equator <- st_sfc(st_linestring(rbind(c(-180, 0), c(180, 0))), crs = st_crs(world))
world <- st_transform(world, crs = 3857)
equator <- st_transform(equator, crs = 3857)
happiness <- happiness %>%
left_join(
world %>%
mutate(
centroid = st_centroid(geometry),
latitude = st_coordinates(centroid)[, 2],
hemisphere = ifelse(latitude > 0, "North", "South"),
distance_to_equator_km = as.numeric(st_distance(centroid, equator)) / 1000
) %>%
select(name, hemisphere, distance_to_equator_km) %>%
rename(country = name),
by = "country"
)
happiness
ice_extent_2023 <- ice_extent_yearly %>%
filter(year == 2023) %>%
pivot_wider(names_from = name, values_from = value, names_prefix = "ice_extent_")
# Join Arctic and Antarctic ice extent data to the happiness dataset for 2023
happiness_2023 <- happiness %>%
filter(year == 2023) %>%
left_join(ice_extent_2023 %>% filter(region == "Arctic"), by = character(0)) %>%
rename(ice_extent_arctic_min = ice_extent_min, ice_extent_arctic_max = ice_extent_max) %>%
left_join(ice_extent_2023 %>% filter(region == "Antarctic"), by = character(0)) %>%
rename(ice_extent_antarctic_min = ice_extent_min, ice_extent_antarctic_max = ice_extent_max)
# Plot 1: Life Ladder vs Distance to Equator
ggplot(happiness_2023, aes(x = distance_to_equator_km, y = life_ladder)) +
geom_point() +
geom_smooth(method = "lm", color = "blue") +
labs(
title = "Life Ladder vs Distance to Equator",
x = "Distance to Equator (km)",
y = "Life Ladder"
) +
theme_minimal()
# Plot 2: Life Ladder vs Arctic and Antarctic Ice Extent (Max and Min)
ggplot(happiness_2023) +
geom_point(aes(x = ice_extent_arctic_max, y = life_ladder, color = "Arctic Max")) +
geom_point(aes(x = ice_extent_arctic_min, y = life_ladder, color = "Arctic Min")) +
geom_point(aes(x = ice_extent_antarctic_max, y = life_ladder, color = "Antarctic Max")) +
geom_point(aes(x = ice_extent_antarctic_min, y = life_ladder, color = "Antarctic Min")) +
labs(
title = "Life Ladder vs Ice Extent in Arctic and Antarctic",
x = "Ice Extent (million sq km)",
y = "Life Ladder",
color = "Extent Type"
) +
theme_minimal()
