)
happiness <- happiness|>
left_join(
rnaturalearth::ne_countries(scale = "medium", returnclass = "sf") |>
transmute(
country = name_long,
distance_to_equator_km = geosphere::distGeo(
cbind(st_coordinates(st_centroid(geometry))[,1], st_coordinates(st_centroid(geometry))[,2]),
cbind(st_coordinates(st_centroid(geometry))[,1], 0)
) / 1000  # Convert to km
),
by = "country"
)
happiness
happiness_bands_gdp <- happiness |>
mutate(distance_band = cut(distance_to_equator_km.y, breaks = seq(0, 10000, by = 500), include.lowest = TRUE, labels = seq(0, 9500, by = 500))) |>
group_by(distance_band) |>
summarize(avg_log_gdp_per_capita = mean(log_gdp_per_capita, na.rm = TRUE))
# Plot for log GDP per capita
ggplot(happiness_bands_gdp, aes(x = distance_band, y = avg_log_gdp_per_capita)) +
geom_bar(stat = "identity", fill = "steelblue") +
annotate("rect", xmin = "1500", xmax = "2500", ymin = 0, ymax = Inf, fill = "orange", alpha = 0.8) +
labs(
title = "Average GDP per Capita by Distance from Equator",
x = "Distance from Equator (km, Binned)",
y = "Average Log GDP per Capita"
) +
scale_x_discrete(breaks = seq(0, 9500, by = 1000)) +
coord_cartesian(ylim = c(min(happiness_bands_gdp$avg_log_gdp_per_capita, na.rm = TRUE) - 0.1,
max(happiness_bands_gdp$avg_log_gdp_per_capita, na.rm = TRUE) + 0.1)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5))
# Group data into 500 km distance bands and calculate average life ladder score for each band
happiness_bands_life <- happiness |>
mutate(distance_band = cut(distance_to_equator_km.y, breaks = seq(0, 10000, by = 500), include.lowest = TRUE, labels = seq(0, 9500, by = 500))) %>%
group_by(distance_band) |>
summarize(avg_life_ladder = mean(life_ladder, na.rm = TRUE))
# Plot for life ladder
ggplot(happiness_bands_life, aes(x = distance_band, y = avg_life_ladder)) +
geom_bar(stat = "identity", fill = "steelblue") +
annotate("rect", xmin = "1500", xmax = "2500", ymin = 0, ymax = Inf, fill = "orange", alpha = 0.8) +
labs(
title = "Average Life Ladder Score by Distance from Equator",
x = "Distance from Equator (km, Binned)",
y = "Average Life Ladder Score"
) +
scale_x_discrete(breaks = seq(0, 9500, by = 1000)) +
coord_cartesian(ylim = c(min(happiness_bands_life$avg_life_ladder, na.rm = TRUE) - 0.1,
max(happiness_bands_life$avg_life_ladder, na.rm = TRUE) + 0.1)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5))
world_map <- map_data("world")
cyclones_data <- cyclones_data |>
mutate(MonthName = factor(month.abb[Month], levels = month.abb)) |>
relocate(MonthName, .after = Month)
ggplot() +
geom_polygon(data = world_map, aes(x = long, y = lat, group = group), fill = "lightgray", color = "white") +
geom_rect(aes(xmin = -180, xmax = 180, ymin = -5, ymax = 5), fill = "red", alpha = 0.2) +
geom_hex(data = cyclones_data, aes(x = long, y = lat, fill = category), bins = 50, alpha = 0.7) +
scale_fill_viridis_d(name = "Storm Category") +
labs(
title = "North Atlantic and Northeast Pacific Cyclones by Category",
x = "Longitude",
y = "Latitude"
) +
scale_x_continuous(breaks = c(-180, -90, 0, 90, 180)) +
scale_y_continuous(breaks = c(-90, -45, 0, 45, 90)) +
theme_minimal()
ggplot() +
geom_polygon(data = world_map, aes(x = long, y = lat, group = group), fill = "lightgray", color = "white") +
geom_rect(aes(xmin = -180, xmax = 180, ymin = -5, ymax = 5), fill = "red", alpha = 0.2) +
geom_hex(data = cyclones_data, aes(x = long, y = lat, fill = Basin, alpha = ..count..), bins = 50) +
scale_fill_viridis_d(name = "Storm Category") +
scale_alpha(range = c(0.35, 1.5)) +
labs(
title = "North Atlantic and Northeast Pacific Cyclones by Basin",
x = "Longitude",
y = "Latitude"
) +
scale_x_continuous(breaks = c(-180, -90, 0, 90, 180)) +
scale_y_continuous(breaks = c(-90, -45, 0, 45, 90)) +
theme_minimal()
ggplot(cyclones_data) +
aes(x = ObservYear, y = MonthName, fill = ..count..) +
geom_bin2d() +
scale_fill_distiller(direction = 1, palette = "YlOrRd") +
labs(
title = "Storm Frequency by Month and Year",
x = "Observation Year",
y = "Month",
fill = "Frequency"
) +
theme_minimal()
ggplot(cyclones_data) +
aes(x = ObservYear, fill = category) +
geom_bar(position = "fill", width = 1) +
labs(
title = "Proportion of Storm Categories Over Time",
x = "Observation Year",
y = "Proportion",
fill = "Storm Category"
) +
theme_minimal()
covid_happiness <- inner_join(covid_2020_world, happiness, by = "country")
covid_happiness |> ggplot(mapping = aes(x = total_cases, y = perceptions_of_corruption))
covid_happiness |> ggplot(mapping = aes(x = total_cases, y = perceptions_of_corruption)) + geom_boxplot()
covid_happiness <- inner_join(covid_2020_world, happiness, by = "country")
covid_happiness |> ggplot(mapping = aes(x = total_cases, y = perceptions_of_corruption)) + geom_violin()
covid_happiness |> ggplot(mapping = aes(x = total_cases, y = perceptions_of_corruption)) + geom_point()
covid_happiness |> ggplot(mapping = aes(x = total_cases, y = perceptions_of_corruption)) + geom_point() + geom_line(method = "lm")
covid_happiness |> ggplot(mapping = aes(x = total_cases, y = perceptions_of_corruption)) + geom_point() + geom_smooth(method = "lm")
covid_happiness |> ggplot(mapping = aes(x = total_cases, y = perceptions_of_corruption), color = "country") + geom_point() + geom_smooth(method = "lm")
covid_happiness |> ggplot(mapping = aes(x = total_cases, y = perceptions_of_corruption, color = "country") + geom_point() + geom_smooth(method = "lm")
covid_happiness |> ggplot(mapping = aes(x = total_cases, y = perceptions_of_corruption, color = "country") + geom_point() + geom_smooth(method = "lm")
covid_happiness |> ggplot(mapping = aes(x = total_cases, y = perceptions_of_corruption, color = "country")) + geom_point() + geom_smooth(method = "lm")
covid_happiness |> ggplot(mapping = aes(x = total_cases, y = perceptions_of_corruption, color = continent)) + geom_point() + geom_smooth(method = "lm")
covid_happiness |> ggplot(mapping = aes(x = total_cases, y = perceptions_of_corruption)) + geom_point() + geom_smooth(method = "lm") + facet_wrap(continent)
covid_happiness |> ggplot(mapping = aes(x = total_cases, y = perceptions_of_corruption)) + geom_point() + geom_smooth(method = "lm") + facet_wrap(continent)
covid_happiness |> ggplot(mapping = aes(x = total_cases, y = perceptions_of_corruption)) + geom_point() + geom_smooth(method = "lm") + facet_wrap(~continent)
covid_happiness |> ggplot(mapping = aes(x = total_cases, y = perceptions_of_corruption, color = continent)) + geom_point() + geom_smooth(method = "lm") + facet_wrap(~continent)
#Social support & life ladder
data_combined <- inner_join(covid_2020, happiness, by = "country")
# echo = FALSE will set the Rmd to *not* show the R code. Don't change this.
# You may change the default figure width and figure height as you please.
knitr::opts_chunk$set(echo = FALSE, message = FALSE, fig.width = 6)
# Put any libraries that you need to load here.
# DO NOT PUT "install.packages()" IN AN RMD FILE!!!
library(tidyverse)
library(arrow)
library(maps)
library(tinytex)
library(sf)
library(rnaturalearth)
library(corrplot)
library(scales)
library(geosphere)
library(ggridges)
cyclones_data <- read_parquet("cyclones_data.parquet")
world <- ne_countries(scale = "medium", returnclass = "sf")
# ________________Map long and lat to scale________________
# Convert latitude(-90/+90) and longitude(-180/+180) to be within the correct range
cyclones_data <- cyclones_data |>
rename(long = lon) |> #rename lon to long to match with world map
mutate(
lat = ((lat + 90) %% 180) - 90,
long = ((long + 180) %% 360) - 180
)
# ________________Determine distance of cyclone to equator________________
equator_point <- c(0, 0)
cyclones_data <- cyclones_data |>
mutate(
km_distance_from_equator = distGeo(cbind(long, lat), cbind(long, 0)) / 1000
)
# ________________Determine distance of cyclone to equator________________
equator_point <- c(0, 0)
cyclones_data <- cyclones_data |>
mutate(
km_distance_from_equator = distGeo(cbind(long, lat), cbind(long, 0)) / 1000
)
# ________________Convert long and lat points to countries________________
cyclones_data <- st_as_sf(cyclones_data, coords = c("long", "lat"), crs = 4326, remove = FALSE) |>
st_join(world["name"], left = TRUE) |>
rename(country = name)
# ________________Create cyclone_cleaned with specified columns________________
cyclone_cleaned <- cyclones_data |>
select(country, lat, long, category, km_distance_from_equator)
cyclone_cleaned
covid_2020 <- read_parquet("covid_2020.parquet")
world <- ne_countries(scale = "medium", returnclass = "sf")
covid_2020 <- covid_2020 |>
mutate(country = case_when(
country == "British Virgin Islands" ~ "British Virgin Is.",
country == "Cape Verde" ~ "Cabo Verde",
country == "Cayman Islands" ~ "Cayman Is.",
country == "Central African Republic" ~ "Central African Rep.",
country == "Cook Islands" ~ "Cook Is.",
country == "Cote d'Ivoire" ~ "Ivory Coast",
country == "Democratic Republic of Congo" ~ "Congo",
country == "Cyprus" ~ "Cyprus",
country == "Dominican Republic" ~ "Dominican Rep.",
country == "East Timor" ~ "Timor-Leste",
country == "England" ~ "United Kingdom",
country == "Equatorial Guinea" ~ "Equat. Guinea",
country == "Eswatini" ~ "Swaziland",
country == "Falkland Islands" ~ "Falkland Isles",
country == "Faroe Islands" ~ "Faroe Isles",
country == "French Guiana" ~ "Fr. Guiana",
country == "French Polynesia" ~ "Fr. Polynesia",
country == "Gibraltar" ~ "Gibraltar",
country == "Guadeloupe" ~ "Guadeloupe",
country == "Marshall Islands" ~ "Marshall Is.",
country == "Martinique" ~ "Martinique",
country == "Mayotte" ~ "Mayotte",
country == "Micronesia (country)" ~ "Micronesia",
country == "Northern Ireland" ~ "Northern Ireland",
country == "Northern Mariana Islands" ~ "N. Mariana Is.",
country == "Pitcairn Islands" ~ "Pitcairn",
country == "Reunion" ~ "Réunion",
country == "Saint Barthelemy" ~ "Saint-Barthélemy",
country == "Saint Kitts and Nevis" ~ "St Kitts & Nevis",
country == "Saint Martin (French part)" ~ "Saint Martin",
country == "Saint Pierre and Miquelon" ~ "St Pierre & Miquelon",
country == "Saint Vincent and the Grenadines" ~ "St Vincent & Gren.",
country == "Sao Tome and Principe" ~ "São Tomé",
country == "Scotland" ~ "Scotland",
country == "Sint Maarten (Dutch part)" ~ "Sint Maarten",
country == "Solomon Islands" ~ "Solomon Is.",
country == "South Sudan" ~ "S. Sudan",
country == "Tokelau" ~ "Tokelau",
country == "Turks and Caicos Islands" ~ "Turks & Caicos",
country == "United States Virgin Islands" ~ "US Virgin Is.",
country == "Wales" ~ "Wales",
country == "Wallis and Futuna" ~ "Wallis & Futuna",
country == "United States" ~ "United States of America",
TRUE ~ country
))
equator <- st_sfc(st_linestring(rbind(c(-180, 0), c(180, 0))), crs = st_crs(world))
world <- st_transform(world, crs = 3857)
equator <- st_transform(equator, crs = 3857)
world_with_distance <- world |>
mutate(
centroid = st_centroid(geometry),
latitude = st_coordinates(centroid)[, 2],
hemisphere = ifelse(latitude > 0, "North", "South"),
distance_to_equator_km = as.numeric(st_distance(centroid, equator)) / 1000  # Convert to kilometers
) |>
select(name, hemisphere, distance_to_equator_km) |>
rename(country = name)
covid_2020 <- covid_2020 |>
left_join(world_with_distance, by = "country")
covid_2020
# Put in your code to load in the data set, along with any
# necessary cleaning beyond what was done in Part 1
happiness <- read_parquet("happiness.parquet")
world_map <- map_data("world")
happiness_mapped <- happiness |>
mutate(country = case_when( #match country names to world_map
country == "United States" ~ "United States of America",
country == "United Kingdom" ~ "UK",
country == "Congo (Brazzaville)" ~ "Congo",
country == "Congo (Kinshasa)" ~ "Congo",
country == "Hong Kong S.A.R. of China" ~ "Hong Kong",
country == "Türkiye" ~ "Turkey",
country == "Lao.People's.Democratic.Republic" ~ "Laos",
country == "United Arab Emirates" ~ "UAE",
TRUE ~ country
)) |>
right_join(world_map, by = c("country" = "region")) #joins the long and lat of the respective countries to map them
world <- ne_countries(scale = "medium", returnclass = "sf")
equator <- st_sfc(st_linestring(rbind(c(-180, 0), c(180, 0))), crs = st_crs(world))
world <- st_transform(world, crs = 3857)
equator <- st_transform(equator, crs = 3857)
happiness <- happiness |>
left_join(
world |>
mutate(
centroid = st_centroid(geometry),
latitude = st_coordinates(centroid)[, 2],
hemisphere = ifelse(latitude > 0, "North", "South"),
distance_to_equator_km = as.numeric(st_distance(centroid, equator)) / 1000
) |>
select(name, hemisphere, distance_to_equator_km) |>
rename(country = name),
by = "country"
)
covid_2020_world <- covid_2020 |>
filter(
total_cases < 50000000
)
ggplot(covid_2020_world, aes(x = distance_to_equator_km, y = total_cases)) +
geom_point(color = "steelblue", alpha = 0.3) +  # Lower alpha for more transparency
geom_density_2d(color = "darkorange") +  # Density lines to show clustering
geom_vline(xintercept = 1500, linetype = "dashed", color = "black") +
geom_vline(xintercept = 2500, linetype = "dashed", color = "black")  +
labs(
title = "Scatter Plot of COVID-19 Cases by Distance from Equator",
x = "Distance from Equator (km)",
y = "Total COVID-19 Cases"
) +
coord_cartesian(xlim = c(0, 10250)) +
scale_y_continuous(
labels = scales::comma,
trans = "log10",
breaks = c(1, 10, 1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 5e7)
) +
theme_minimal()
ggplot(cyclones_data |> filter(!is.na(category)), aes(x = km_distance_from_equator, y = category, fill = category)) +
geom_density_ridges(scale = 2, alpha = 0.7, color = "black") +
geom_vline(xintercept = 1500, linetype = "dashed", color = "black") +
geom_vline(xintercept = 2500, linetype = "dashed", color = "black") +
labs(
x = "Distance from Equator (km)",
y = "Cyclone Category",
title = "Ridgeline Plot of Distance from Equator by Cyclone Category"
) +
coord_cartesian(xlim = c(0, 6500)) +
theme_minimal() +
theme(
legend.position = "none",
panel.grid.major = element_line(color = "grey80"),
panel.grid.minor = element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10)
)
#Social support & life ladder
data_combined <- inner_join(covid_2020, happiness, by = "country")
median_social_support <- median(data_combined$social_support, na.rm = TRUE)
ggplot(data_combined, aes(x = social_support, y = life_ladder, color = continent)) +
geom_point(alpha = 0.7, position = "jitter") +
geom_smooth(method = "lm", color = "blue", se = TRUE) +
geom_vline(xintercept = median_social_support, color = "red", linetype = "dashed", linewidth = 1) +
labs(
title = "Comparison of Social Support and Life Ladder by Continent",
x = "Social Support",
y = "Life Ladder (Happiness Score)",
color = "Continent"
) +
facet_wrap(~ continent) +
theme_minimal() +
theme(panel.grid.major = element_line(color = "grey", linetype = "dashed", linewidth = 0.5))
# Social Support & Life Expectancy
ggplot(data_combined, aes(x = social_support, y = healthy_life_expectancy_at_birth, color = continent)) +
geom_point(alpha = 0.7, position = "jitter") +
geom_smooth(method = "lm", color = "blue", se = TRUE) +
geom_vline(xintercept = median_social_support, color = "red", linetype = "dashed", linewidth = 1) +
labs(
title = "Comparison of Social Support and Life Expectancy by Continent",
x = "Social Support",
y = "Healthy Life Expectancy at Birth",
color = "Continent"
) +
facet_wrap(~ continent) +
theme_minimal() +
theme(panel.grid.major = element_line(color = "grey", linetype = "dashed", linewidth = 0.5))
data_combined <- inner_join(covid_2020, happiness, by = "country")
median_total_cases <- median(data_combined$total_cases, na.rm = TRUE)
ggplot(data_combined, aes(x = total_cases / 100, y = freedom_to_make_life_choices)) +
geom_point(alpha = 0.5, position = "jitter") +
geom_smooth(method = "lm", color = "blue", se = TRUE) +
geom_vline(xintercept = median_total_cases, color = "red", linetype = "dashed", linewidth = 1) +
labs(
title = "Comparison of COVID-19 Cases and Freedom",
x = "Total COVID-19 Cases",
y = "Freedom"
) +
scale_x_log10() +
scale_y_log10() +
theme_minimal() +
theme(panel.grid.major = element_line(color = "grey", linetype = "dashed", linewidth = 0.5))
#Life expectancy & Cyclone count
cyclone_counts <- cyclones_data |>
group_by(country) |>
summarise(cyclone_count = n())
combined_data <- cyclone_counts |>
inner_join(happiness, by = "country") |>
select(country, cyclone_count, healthy_life_expectancy_at_birth)
combined_data <- combined_data |>
arrange(desc(cyclone_count)) |>
slice(-1:-3)
ggplot(combined_data, aes(y = cyclone_count, x = healthy_life_expectancy_at_birth)) +
geom_point(alpha = 0.7) +
geom_smooth(method = "lm", se = TRUE, color = "blue") +
labs(
title = "Relationship Between Cyclone Count and Life Expectancy (Outlier Removed)",
x = "Cyclone Count",
y = "Healthy Life Expectancy at Birth"
) +
theme_minimal()
colnames(happiness)
# distance & cyclone count
# Load required libraries
library(tidyverse)
# Step 1: Aggregate cyclone counts by country
cyclone_counts <- cyclones_data |>
group_by(country) |>
summarise(cyclone_count = n())
# Step 2: Join with happiness data on 'country' to add distance from the equator
combined_data <- cyclone_counts |>
inner_join(happiness, by = "country") |>
select(country, cyclone_count, distance_to_equator_km)
# Step 3: Remove the top 3 highest cyclone counts
combined_data <- combined_data |>
arrange(desc(cyclone_count)) |>
slice(-1:-3)
# Step 4: Plot the relationship between distance to equator and cyclone count
ggplot(combined_data, aes(x = distance_to_equator_km, y = cyclone_count)) +
geom_point(alpha = 0.7, color = "blue") +
geom_smooth(method = "lm", color = "red", se = TRUE) +
labs(
title = "Comparison of Cyclone Count and Distance from Equator (Top 3 Outliers Removed)",
x = "Distance from Equator (km)",
y = "Cyclone Count"
) +
theme_minimal()
ggplot(cyclones_data |> filter(!is.na(category)), aes(x = km_distance_from_equator, y = category, fill = category)) +
geom_density_ridges(scale = 2, alpha = 0.7, color = "black", size = 0.3) +
labs(
x = "Distance from Equator (km)",
y = "Cyclone Category",
title = "Ridgeline Plot of Distance from Equator by Cyclone Category"
) +
coord_cartesian(xlim = c(0, 6500)) +
theme_minimal() +
theme(
legend.position = "none",
panel.grid.major = element_line(color = "grey80"),
panel.grid.minor = element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10)
)
colnames(happiness)
ggplot(cyclones_data |> filter(!is.na(category)), aes(x = km_distance_from_equator, y = category, fill = category)) +
geom_density_ridges(scale = 2, alpha = 0.7, color = "black") +
annotate("rect", xmin = 1500, xmax = 2500, ymin = 0, ymax = Inf, fill = "orange", alpha = 0.8) +
labs(
x = "Distance from Equator (km)",
y = "Cyclone Category",
title = "Ridgeline Plot of Distance from Equator by Cyclone Category"
) +
coord_cartesian(xlim = c(0, 6500)) +
theme_minimal() +
theme(
legend.position = "none",
panel.grid.major = element_line(color = "grey80"),
panel.grid.minor = element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 10)
)
happiness <- happiness|>
left_join(
rnaturalearth::ne_countries(scale = "medium", returnclass = "sf") |>
transmute(
country = name_long,
distance_to_equator_km = geosphere::distGeo(
cbind(st_coordinates(st_centroid(geometry))[,1], st_coordinates(st_centroid(geometry))[,2]),
cbind(st_coordinates(st_centroid(geometry))[,1], 0)
) / 1000  # Convert to km
),
by = "country"
)
happiness
happiness_bands_gdp <- happiness |>
mutate(distance_band = cut(distance_to_equator_km.y, breaks = seq(0, 10000, by = 500), include.lowest = TRUE, labels = seq(0, 9500, by = 500))) |>
group_by(distance_band) |>
summarize(avg_log_gdp_per_capita = mean(log_gdp_per_capita, na.rm = TRUE))
# Plot for log GDP per capita
ggplot(happiness_bands_gdp, aes(x = distance_band, y = avg_log_gdp_per_capita)) +
geom_bar(stat = "identity", fill = "steelblue") +
annotate("rect", xmin = "1500", xmax = "2500", ymin = 0, ymax = Inf, fill = "orange", alpha = 0.8) +
labs(
title = "Average GDP per Capita by Distance from Equator",
x = "Distance from Equator (km, Binned)",
y = "Average Log GDP per Capita"
) +
scale_x_discrete(breaks = seq(0, 9500, by = 1000)) +
coord_cartesian(ylim = c(min(happiness_bands_gdp$avg_log_gdp_per_capita, na.rm = TRUE) - 0.1,
max(happiness_bands_gdp$avg_log_gdp_per_capita, na.rm = TRUE) + 0.1)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5))
# Group data into 500 km distance bands and calculate average life ladder score for each band
happiness_bands_life <- happiness |>
mutate(distance_band = cut(distance_to_equator_km.y, breaks = seq(0, 10000, by = 500), include.lowest = TRUE, labels = seq(0, 9500, by = 500))) |>
group_by(distance_band) |>
summarize(avg_life_ladder = mean(life_ladder, na.rm = TRUE))
# Plot for life ladder
ggplot(happiness_bands_life, aes(x = distance_band, y = avg_life_ladder)) +
geom_bar(stat = "identity", fill = "steelblue") +
annotate("rect", xmin = "1500", xmax = "2500", ymin = 0, ymax = Inf, fill = "orange", alpha = 0.8) +
labs(
title = "Average Life Ladder Score by Distance from Equator",
x = "Distance from Equator (km, Binned)",
y = "Average Life Ladder Score"
) +
scale_x_discrete(breaks = seq(0, 9500, by = 1000)) +
coord_cartesian(ylim = c(min(happiness_bands_life$avg_life_ladder, na.rm = TRUE) - 0.1,
max(happiness_bands_life$avg_life_ladder, na.rm = TRUE) + 0.1)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5))
covid_happiness <- inner_join(covid_2020_world, happiness, by = "country")
filter_covid_happiness <- covid_happiness |> filter(!is.na(total_cases), !is.na(perceptions_of_corruption))
ratio_covid_happiness <- filter_covid_happiness |> group_by(country) |>
mutate(
ratio = total_cases * perceptions_of_corruption
)
covid_happiness |> filter(!is.na(total_cases), !is.na(perceptions_of_corruption)) |>
ggplot(mapping = aes(x = perceptions_of_corruption, y = total_cases, color = continent)) + geom_boxplot() + facet_wrap(~continent) + labs(title = "Perception of Corruption and COVID cases by continent", subtitle = "Weight of COVID cases repective to perception of corruption", x = "Perception of Corruption (0 - 1)", y = "Total Cases", caption = "Source: covid.ourworldindata.org\nworldhappiness.report") + theme_minimal() + theme(legend.position = "None")
insight_2_sum_stats
insight_2_sum_stats <- summary(covid_happiness)
insight_2_sum_stats
insight_2_sum_stats <- covid_happiness |> select(continent, perceptions_of_corruption, total_cases) |> summary()
insight_2_sum_stats <- covid_happiness |> select(country, continent, perceptions_of_corruption, total_cases) |> summary()
insight_2_sum_stats
insight_2_sum_stats <- covid_happiness |> select(country, continent, perceptions_of_corruption, total_cases) |> summary() |> table()
insight_2_sum_stats
library(psych)
insight_2_sum_stats <- covid_happiness |> select(country, continent, perceptions_of_corruption, total_cases) |> describe()
insight_2_sum_stats
insight_2_sum_stats <- covid_happiness |> select(country, continent, perceptions_of_corruption, total_cases) |> tbl_sum()
insight_2_sum_stats
insight_2_sum_stats <- covid_happiness |> select(country, continent, perceptions_of_corruption, total_cases) |> tbl_summary()
library(gtsummary)
library(gapminder)
install.packages("gtsummary")
install.packages("gapminder")
library(gtsummary)
library(gapminder)
library(glue)
library(gtsummary)
library(gtsummary)
library(gtsummary)
library(glue)
install.packages("glue")
